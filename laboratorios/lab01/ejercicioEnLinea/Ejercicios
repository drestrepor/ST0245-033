//Factorial
public int factorial(int n) {
  if (n == 1)
    return 1;
   
  return n * factorial(n-1);
}

//bunnyEars
public int bunnyEars(int bunnies) {
  if (bunnies == 0)
    return 0;
  if (bunnies == 1)
    return 2;
  return 2 + bunnyEars(bunnies-1);
}

//Fibonacci
public int fibonacci(int n) {
  if (n == 0)
    return 0;
  if (n == 1)
    return 1;
  return fibonacci(n-1) + fibonacci(n-2);
  
}

//bunnyEars2
public int bunnyEars2(int bunnies) {
  if (bunnies == 0)
    return 0;
  if (bunnies%2 == 0)
    return 3 + bunnyEars2(bunnies-1);
  return 2 + bunnyEars2(bunnies-1);
}

//triangle
public int triangle(int rows) {
  if (rows == 0) {
    return 0;  
  }
  if (rows == 1){
    return 1;  
  }
  return rows + triangle(rows-1);
}

//sumDigits
public int sumDigits(int n) {
  if (n == 0) {
    return 0;
  }
  return (n%10) + sumDigits(n/10);
}

//count7
public int count7(int n) {
  if (n == 0)
    return 0;
  if (n%10 == 7)
    return 1 + count7(n/10);
  return count7(n/10);
}

//count8
public int count8(int n) {
  if (n == 0) {
    return 0;
  }
  if (n%10 == 8 && n%100== 88) {
    return 2 + count8(n/10);
  }
  if (n%10 == 8) {
    return 1 + count8(n/10);
  }
  return count8(n/10);
}

//powerN
public int powerN(int base, int n) {
  if (n == 0) 
    return 1;
  return base * powerN(base,n-1);
}

//countx
public int countX(String str) {
  if (str.length() == 0)
    return 0;
  if (str.charAt(str.length()-1) == 'x')
    return 1 + countX(str.substring(0,str.length()-1));
  return countX(str.substring(0,str.length()-1));
}

//countHi
public int countHi(String str) {
  if (str.length() <= 1)
    return 0;
  if (str.substring(str.length()-2 , str.length()).equals("hi"))
    return 1 + countHi(str.substring(0, str.length()-1));
  return countHi(str.substring(0, str.length()-1));
}

//changeXY
public String changeXY(String str) {
  if (str.length() < 1)
    return "";
  if (str.charAt(0) == 'x')
    return "y" + changeXY(str.substring(1));
  return str.charAt(0) + changeXY(str.substring(1));
}

//changePi
public String changePi(String str) {
  if (str.length() < 2)
   return str;
  if (str.substring(0 , 2).equals("pi"))
    return "3.14" + changePi(str.substring(2));
  return str.substring(0,1) + changePi(str.substring(1));
}

//noX
public String noX(String str) {
  if (str.length() == 0)
    return "";
  if (str.charAt(0) != 'x')
    return str.charAt (0) + noX(str.substring(1));
  return noX(str.substring(1));
}

//array6
public boolean array6(int[] nums, int index) {
  if (nums.length <= index)
    return false;
  if (nums[index] == 6)
    return true;
  return array6(nums , index + 1);
}

//arrary11
public int array11(int[] nums, int index) {
  if (nums.length <= index)
    return 0;
  if (nums[index] == 11)
    return 1 + array11(nums , index + 1);
  return array11(nums , index + 1);
}

//array220
public boolean array220(int[] nums, int index) {
  if (nums.length -1 <= index )
    return false;
  if (nums[index]*10 == nums[index + 1])
    return true;
  return array220(nums , index + 1);
}

//allStar
public String allStar(String str) {
  if (str.length() <= 1)
   return str;
  return str.charAt(0) + "*" + allStar(str.substring(1));
}

//pairStar
public String pairStar(String str) {
  if (str.length() <= 1)
    return str;
  if (str.charAt(0) == str.charAt(1))
    return str.charAt(0) + "*" + pairStar(str.substring(1));
  return str.charAt(0) + pairStar(str.substring(1));
}

//endX
public String endX(String str) {
  if (str.length() <= 1)
    return str;
  if (str.charAt(0) == 'x')
    return endX(str.substring(1)) + 'x';
  return str.charAt(0) + endX(str.substring(1));
}

//countPairs
public int countPairs(String str) {
  if (str.length() <= 2)
    return 0;
  if (str.charAt(0) == str.charAt(2))
    return 1 + countPairs(str.substring(1));
  return countPairs(str.substring(1));
}

//countAbc
public int countAbc(String str) {
  if (str.length() <= 2)
    return 0;
  if (str.substring(0 , 3).equals("abc") || str.substring(0 , 3).equals("aba"))
    return 1 + countAbc(str.substring(1));
  return countAbc(str.substring(1));
}

//count11
public int count11(String str) {
  if (str.length() <= 1)
    return 0;
  if (str.substring(0,2).equals("11"))
    return 1 + count11(str.substring(2));
  return count11(str.substring(1));
}

//stringClean
public String stringClean(String str) {
  if (str.length() <= 1)
    return str;
  if (str.charAt(0) == str.charAt(1))
    return stringClean(str.substring(1));
  return str.charAt(0) + stringClean(str.substring(1));
  
}

//countHi2
public int countHi2(String str) {
  if (str.length() <= 1)
    return 0;
  if (str.length()>2 && (str.charAt(0) == 'x' && str.substring(1 , 3).equals("hi")))
    return countHi2(str.substring(1)) - 1;
  if (str.substring(0 , 2).equals("hi"))
    return 1 + countHi2(str.substring(2));
  return countHi2(str.substring(1));
}

//parenBit
public String parenBit(String str) {
  return str.substring(str.indexOf('(') , str.indexOf(')') + 1);
}

//nestParen
public boolean nestParen(String str) {
  if (str.length() == 0)
    return true;
  if (str.charAt(0) == '(' && str.charAt(str.length() - 1) == ')')
    return nestParen(str.substring(1 , str.length() - 1));
  return false;
}

//strCount
public int strCount(String str, String sub) {
  if (str.length() == 0)
    return 0;
  if (str.length() >= sub.length() && str.substring(0 , sub.length()).equals(sub))
    return 1 + strCount(str.substring(sub.length()) , sub);
  return strCount(str.substring(1) , sub);
}

//strCopies
public boolean strCopies(String str, String sub, int n) {
  if (str.length() < sub.length()){
    if (n == 0)
      return true;
    else
      return false;
  }
  if (str.substring(0 , sub.length()).equals(sub))
    return strCopies(str.substring(1) , sub , n-1);
  return strCopies(str.substring(1) , sub , n);
  
}

//strDist
public int strDist(String str, String sub) {
  if (str.length() < sub.length())
    return 0;
  if (str.substring(0 , sub.length()).equals(sub)){
    if (str.substring(str.length() - sub.length() , str.length()).equals(sub))
      return str.length();
    return strDist(str.substring(0 , str.length() - 1) , sub);
  }
  return strDist(str.substring(1) , sub);
}

//groupSum6
public boolean groupSum6(int start, int[] nums, int target) {
  if (start >= nums.length)
    return(target == 0);
  if (nums[start] == 6){
    if (groupSum6(start + 1, nums , target - 6 ))
      return true;
    return false;
  }
  if (groupSum6(start + 1 , nums , target - nums[start]))
    return true;
  if (groupSum6(start + 1 , nums , target))
    return true;
  return false;
}

//groupNoAdj
public boolean groupNoAdj(int start, int[] nums, int target) {
  if (start >= nums.length)
    return (target == 0);
  if (groupNoAdj(start + 2, nums , target - nums[start]))
    return true;
  if (groupNoAdj(start + 1, nums , target)){
    if (groupNoAdj(start + 2, nums , target - nums[start]))
      return true;
    return true;
  }
  return false;
}

//groupSum5
public boolean groupSum5(int start, int[] nums, int target) {
  if (start >= nums.length)
    return (target == 0);
  if (groupSum5(start + 1 , nums, target - nums[start])){
    if (start > 0 && (nums[start - 1] % 5 == 0 && nums [start] == 1))
      return false;
    return true;
  }
  if (groupSum5(start + 1, nums, target)){
    if (nums[start] % 5 == 0)
      return false;
    return true;
  }
  return false;
}

//groupSumClump
public boolean groupSumClump(int start, int[] nums, int target) {
  if (start >= nums.length)
    return (target == 0);
  if (groupSumClump(start + 1 , nums , target - nums[start])){
    if (start < nums.length - 1  && (nums[start] == nums[start + 1]) || start != 0 && (nums[start-1] == nums[start]) )
      return false;
    return true;
  }
  if (groupSumClump(start + 1 , nums, target)){
    if (start != 0 && (nums[start-1] == nums[start]) && start < nums.length - 1  && (nums[start] == nums[start + 1]))
      return false;
    return true;
  }
  return false;
}

